{
    "header": {
        "home": "Home",
        "experience": "Experience",
        "projects": "Projects",
        "articles": "Articles",
        "switch_theme": "Switch Theme",
        "download_cv": "Download CV"
    },
    "hero": {
        "title": "Hi, I’m Fakhri",
        "or": "or",
        "check_projects": "See My Projects"
    },
    "about": {
        "label": "About Me",
        "title": "Curious about me? Here you have it.",
        "description": "I'm a <strong>Mobile Developer</strong> with <strong>over Three Years of Experience</strong> building applications across <strong>government, industrial, and enterprise sectors</strong>. I’m passionate about <strong>SOLID principles</strong> and <strong>Clean Architecture</strong>, and have contributed to both <strong>end-user products</strong> and internal <strong>mobile libraries (SDKs)</strong>. Skilled at working independently and collaboratively, I'm committed to continuously growing in the mobile engineering space.<br/><br/>My background includes a <strong>Bachelor's degree in Informatics Engineering</strong> from <strong>Universitas Dian Nuswantoro</strong>, with academic focus on <strong>machine learning</strong> and <strong>mobile cybersecurity</strong>. Outside of mobile, I’ve also developed <strong>web and desktop applications</strong> using a variety of modern technologies and frameworks, ensuring clean, maintainable, and scalable solutions."
    },
    "skills": {
        "label": "Skills",
        "title": "The skills, tools and technologies I am really good at:"
    },
    "articles": {
        "label": "Articles",
        "title": "Some thoughts and writings I've published recently:"
    },
    "experience": {
    "label": "Experience",
    "title": "Here is a quick summary of my most recent experiences:",
    "items": [
        {
        "title": "Mobile Developer",
        "company": "Fischer Medical Ventures",
        "location": "Central Region, Singapore",
        "period": "September 2024 – March 2025",
        "responsibilities": [
            "Developed production-grade Android applications that integrated with medical hardware using USB and Bluetooth Low Energy (BLE), enabling real-time device communication and control.",
            "Led technical research initiatives into BLE protocols, video conferencing SDKs, and on-device machine learning models (TensorFlow Lite) for real-time diagnostics and embedded AI use cases.",
            "Collaborated with cross-functional teams including firmware engineers and backend developers to deliver high-reliability Android apps for medical use."
        ],
        "logo": "/assets/logo/asset-fmv-logo.png"
        },
        {
        "title": "Android Engineer Intern",
        "company": "Traveloka (Travel Activities Department)",
        "location": "Tangerang, Indonesia",
        "period": "February 2024 – June 2024",
        "responsibilities": [
            "Refactored legacy modules and fixed bugs in the Traveloka Android app (50M+ downloads), improving responsiveness across device tiers and strengthening release stability.",
            "Implemented new features end-to-end using Clean MVVM and MVP architecture. Wrote unit/UI tests across Kotlin and Java, lifting coverage to 70%+ and reducing regressions during releases.",
            "Researched and proposed integration strategies for Jetpack Compose and modern Android libraries to improve developer efficiency and UI responsiveness."
        ],
        "logo": "/assets/logo/asset-traveloka-logo.png"
        },
        {
        "title": "Mobile Developer",
        "company": "Freelanxx",
        "location": "Semarang, Indonesia",
        "period": "January 2022 – January 2024",
        "responsibilities": [
            "Designed, developed, and deployed cross-platform mobile applications using Kotlin, Java, and Flutter for diverse clients across healthcare, education, and retail sectors.",
            "Built RESTful API backends using Node.js and Laravel to support mobile features such as authentication, real-time updates, and secure data storage.",
            "Led agile-based development sprints, coordinated with remote teams, and maintained version control using GitHub and GitLab CI/CD pipelines."
        ],
        "logo": "/assets/logo/asset-freelanxx-logo.png"
        },
        {
        "title": "Mobile Developer Intern",
        "company": "Schoters (Project-Based Internship)",
        "location": "Indonesia",
        "period": "July 2022 – August 2022",
        "responsibilities": [
            "Built and maintained Android application features using Java and Kotlin, integrated Firebase services including Realtime Database and Crashlytics.",
            "Practiced version control (Git) and participated in collaborative code reviews as part of a remote internship program simulating real-world development environments.",
            "Optimized existing app performance through profiling and refactoring efforts aligned with Clean Architecture principles."
        ],
        "logo": "/assets/logo/asset-schoters-logo.jpg"
        }
    ]
    },
    "projects": {
        "label": "Projects",
        "title": "Some of the projects I’ve worked on:",
        "platform": "Platform",
        "technologies": "Technologies",
        "clear": "Clear",
        "none": "No Projects Found.",
        "filter": "Filter",
        "apply": "Apply",
        "click_full_detail": "click to see full detail",
        "showing": "Showing {shown} of {total} projects",
        "items": {
            "stethoscope_project": "The Stethoscope app is a mobile application purpose-built for healthcare professionals to capture, review, and manage digital stethoscope recordings at the point of care. Running on Android and iOS, it pairs with BLE-enabled stethoscopes to stream high-fidelity heart and lung sounds, visualize them in real time, and attach recordings to patient encounters for longitudinal tracking.",
            "xray_project": "The X-Ray App is a native Android tablet tool built for Digihealth’s clinical kiosks. It connects directly to X-ray equipment in the room, pulls DICOM studies from remote imaging systems, and puts clean, responsive image review in a doctor’s hands at the point of care. Doctors can label findings, draw regions of interest, measure angles and distances, and fine tune contrast and window or level. The image toolkit is powered by OpenCV and a precise color picker, so annotations and edits remain consistent across cases. Everything is designed for tablet ergonomics, from pinch and zoom to quick toggles for overlays and presets. The app follows an offline first model. Studies, edits, and notes are stored locally when a connection is unavailable, then synced back to the backend as soon as the device is online. In practice that means rounds and consultations never pause for network conditions, while records still land in the right place once connectivity returns.",
            "digihealth_kiosk_project": "The Health Kiosk is an Android-based tablet application developed to run on tablets embedded within Digihealth ATM units, which are deployed in public areas such as clinics and hospitals. It offers a self-service healthcare experience, allowing patients to access essential health services efficiently and independently. This system connects to a centralized backend via secure RESTful APIs to handle authentication, data synchronization, appointment scheduling, and more. The kiosk integrates with various medical devices including digital weight scales, height sensors, oximeters, blood pressure monitors, and thermometers to collect real-time health vitals from users. To enhance the quality of care, the kiosk also integrates with AI modules for health risk predictions, symptom triage, and intelligent health recommendations based on collected data. Patients can log in, manage appointments, join queue systems, and review medical records directly from the interface.",
            "patient_health_companion_project": "The Patient Health Companion is a Flutter mobile app that brings the Digihealth kiosk experience to phones. It runs on Android and iOS with the same look and feel. The interface is clean and easy to tap. Patients can update their profile and health data. They can view or book appointments without calling the clinic. Video and chat visits work inside the app using Agora, with simple layouts that keep notes and messages visible. Daily tracking covers vitals, nutrition, sleep, and fitness goals. The app turns these inputs into clear trends and practical tips, with AI insights shown only when they help. The Companion connects to the Digihealth backend through secure REST APIs and WebSockets for live updates. Appointments, messages, and measurements stay in sync across kiosk and mobile. It feels like one continuous place for care at home, on the move, and in the clinic.",
            "teddy_project": "Released in Traveloka 1.1.1. I reworked ticket details to surface what travelers actually compare: baggage and change/refund rules, fare differences, seating and timing notes, and clear vendor terms in plain language. The layout prioritizes must-know info above the fold and reduces jargon, so users feel confident and move forward without bouncing between tabs.",
            "tweety_project": "Released in Traveloka 4.0.0. I updated a lot of pieces, from the carousel to ticket descriptions. I added a “Browse other tickets” section inside the ticket detail so users can check better times or prices without losing their place. Each alternative shows time differences, fare rules, seats left, baggage, and change or refund info, with quick sort and filter controls and clear comparison chips. I also tightened the booking flow from listing to attendee selection with smarter defaults and prefills, clearer step progress, and stronger error handling. The result is fewer interruptions and a smoother path to payment.",
            "lp_sr_cruise_project": "Released in Traveloka 4.0.0. I introduced multi-select filters with dependency logic. When a user chooses a filter, the remaining options update to show only valid combinations, with removable chips, preserved state across pagination, and deep-linkable URLs. This makes exploration faster and avoids dead-end results.",
            "spaceAttack_kmp_swiftui": "Arcade shooter I wrote once and shipped to iOS and Android. The core loop, scoring rules, and leaderboard logic live in Kotlin Multiplatform so fixes land in both apps. SwiftUI and Compose handle the UI with the same timing constants, so animations feel identical at 60 fps. Saves are local for fast resume and a small sync runs in the background when the network is available. I split the code into MVVM modules so gameplay, storage, and network do not leak into each other. The project is a good template for small cross platform games that want native UI.",
            "stasave_compose": "Status saver with a clean Compose surface and very few steps. It scans media folders, builds a fast thumbnail grid, and writes files with WorkManager so downloads keep going even if the app is backgrounded. The permission flow is short and direct, and a storage cleaner removes temporary bits after a successful save. I added a share action and a small snackbar system so users get immediate feedback. The codebase follows a simple MVVM pattern and each screen has a preview for quick UI review.",
            "beritain_swiftui": "SwiftUI news reader that stays responsive on a slow connection. Articles are cached in Core Data and images are loaded with an async pipeline so scrolling stays smooth. I used Swinject for dependency injection to keep view code light. The layout supports multiple languages and I validated a few tricky truncation cases. CI runs SwiftLint and unit tests on each push, and a background refresh updates headlines while the app is idle.",
            "leech_android_lib": "Small Android download library that focuses on reliability. It wraps OkHttp, supports pause and resume, and handles flaky networks with simple retry rules. A foreground service shows progress and survives configuration changes. The API has clear entry points and the sample app doubles as a test bed with edge cases like server redirects and partial content. I kept the surface small so teams can adopt it without pulling in a lot of extra code.",
            "floating_menu_ios": "Floating action menu for iOS shipped as a Swift Package. It anchors to a tab bar or a custom container and adjusts to safe areas automatically. Haptics are built in, light and dark mode are supported, and spacing and icons can be tuned with a few parameters. I paid attention to animation timing so the menu feels quick without being jumpy. The demo targets a couple of screen sizes to make sure the layout stays tidy.",
            "highlightor_android_lib": "Compose utility for guided walkthroughs and onboarding. It measures target bounds at runtime, dims the rest of the screen, and steps through a sequence with a builder style API. Touch is blocked outside the focus area, and the arrow and label can be themed. I tested a few gesture heavy screens to confirm it does not break scroll or fling. The code is small enough that teams can read it in one sitting and adjust it to their needs.",
            "trafficsense_kotlin": "Android and IoT experiment that reacts to live data. The app reads location updates, overlays routes on Google Maps, and suggests carpools to cut travel and exposure. A small rules engine chooses between route options based on traffic and shared pickups. I wrote the data layer in plain Kotlin so behavior is easy to follow, and I logged decisions to help tune the rules. It is a good starting point for mobility projects that want to try ideas quickly.",
            "ndorokojo_kotlin": "Livestock marketplace that keeps the flow simple. Sellers post a listing with a short form, buyers filter by type and location, and both sides get notifications when there is a match. OSMDroid handles the map so the app stays light. The list is optimized for low end phones and still feels responsive. I shipped a small admin tool to clear spam and keep the feed clean.",
            "jukee_java": "Music player in Java with a hosted playlist feature. Playlists sync with Firebase so a friend can load the same set in a few seconds. Playback is smooth with a simple service and a tidy notification, and the UI avoids heavy decoration so it stays fast. I wrote the storage layer with clear interfaces so switching to another backend would be straightforward. It is a solid example of a classic Android app that still feels good.",
            "my_heavy_equipment_kotlin": "Maintenance helper built for field use. It scans QR codes to pull an asset record, stores entries locally, and builds a PDF summary you can send to a supervisor. The REST API is small and predictable so it is easy to mock in tests. Offline work is queued and retried when the network returns. The screens avoid clutter and the flow keeps the user in a single context until the job is done.",
            "beataco_java_swing": "Desktop tool for Telegram broadcasts that favors control. You draft a message, pick targets, schedule a send, and watch a compact log for results. It talks to the Telegram Bot API and remembers basic settings between sessions. The UI is Swing with sensible defaults and keyboard shortcuts for operators who live on the app for hours. It is not flashy and that is the point.",
            "beritain_kotlin": "Android news app that aims for predictable behavior. The architecture is MVVM with strict module boundaries so features do not tangle. Articles are encrypted at rest with SQLCipher and dependencies are wired with Koin. Network calls are pinned and WorkManager handles background refresh. I tested empty states and bad network paths so the app fails in a way that still makes sense.",
            "ecoquest_kotlin": "Sustainability app with a light game layer. Users pick small quests, earn points, and see their place on a leaderboard. The stack is MVVM with Firebase for sync and simple analytics to learn which quests stick. Reminders are gentle and can be muted so it does not feel like spam. The UI uses accessible colors and large tap targets so it works well on older devices.",
            "sakuku_kotlin": "Personal finance app that tries to stay calm. Balances and goals are on one screen and you can drill down without losing context. I wrote small custom views for charts to avoid heavy dependencies and tuned them for low memory devices. Data syncs through Firebase which keeps setup light for a single user. The code is clean enough that a new contributor can add a screen in a day.",
            "examine_kotlin": "Scanner that treats security as part of the normal flow. Codes are read, payloads are encrypted with AES, and actions are tied to a device id for traceability. Retrofit handles requests and the audit trail is stored in a way that is easy to export. I added clear user prompts for failure cases so people do not get stuck. The end result is strict without feeling heavy.",
            "hangman_java": "Small hangman game for Android built for quick play. It runs fully offline and never nags. Word packs live in the app, progress is saved locally, and the UI is large and readable. The code shows a clean separation between the game loop and the view which makes it a nice teaching sample.",
            "bankit_java": "Banking style sample that demonstrates clear flows without extra noise. Login, transfer, and history use patterns that teams already know which makes it easy to extend. Lists and forms are tidy and the code is straight Java on purpose. It is a good base when you need to show a stakeholder what a simple path would look like.",
            "laundry_compose": "Compose UI for a laundry service that focuses on predictable components. Home, services, and order flow share one design system and all components have previews. State holders are thin, theming is consistent, and everything is ready to receive real endpoints. I measured a few large lists to keep scrolling fluid on budget phones.",
            "picdf_compose": "Tool that turns images into a single PDF with a short path. Pick photos, reorder with drag and drop, set a title, and export with PdfDocument. The app shows a share sheet right after the file is written, and it keeps a small recent list for quick access. The code avoids hidden work on the main thread so the UI stays responsive during export.",
            "aromaloka_kotlin": "UI slicing project that matches a reference layout closely. ConstraintLayout handles dense parts and MotionLayout adds small transitions where they help. I wrote notes in the code about spacing and ratios so handoff is simple. The goal was not to reinvent the design but to ship a faithful layout that engineers can build on.",
            "diabetless_kotlin": "Healthcare UI slicing that values calm and clarity. Forms use clear labels and input masks to reduce mistakes, and color choices follow accessibility targets. Navigation is shallow and error messages point to the exact field. The structure matches common patterns so real endpoints can drop in without reshuffling everything.",
            "painthings_kotlin": "Art marketplace slicing with attention to images. There is a grid, a detail view with a clean gallery, a simple cart, and a fake checkout so flows can be tested end to end. Image loading is smooth and the layout scales down to small screens. The point was to keep the visuals in front and keep the forms from getting in the way.",
            "capstone_kotlin": "Concept app that ties a few screens into a believable flow. Navigation is straightforward, view models own state, and repositories isolate data access. The project includes a small fake backend so people can click through without setting up services. It is the kind of base you can demo at the end of a sprint and then keep.",
            "cba_java": "Beauty shop UI in Java that covers the usual path. Product list, details, cart, and a small coupon step are in place. SQLite caches responses so the app feels quick after the first run. The code follows standard Android patterns and avoids heavy libraries so it is easy to read.",
            "gamography_swiftui": "Game catalog for iOS with a clean SwiftUI front end. Search and favorites work offline, images load with async pipelines, and the network layer is thin so a new API can be swapped in without stress. I tuned list performance for older phones and built a couple of accessibility tweaks for large text. It feels fast yet still readable."
        }
    },
    "contact": {
        "title": "Contact Me",
        "description": "Let’s work together! Drop me a line below or email me directly.",
        "email_label": "Email",
        "phone_label": "Phone / Whatsapp / WeChat",
        "find_me_at": "Or Find me at:"
    },
    "footer": {
        "copyright": "© 2025 I Designed and coded by Fakhri Rasyid Saputro"
    },
    "notfound": {
        "message": "Oops! The page you're looking for doesn't exist.",
        "go_home": "Go Home"
    }
}
